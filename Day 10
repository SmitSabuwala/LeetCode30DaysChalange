Min Stack
Solution
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

Answer:-  

class MinStack {
    
    class Node{
        int val;
        int minVal;
        Node next;
    }
    Node head;

    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        Node oldHead = head;
        head=new Node();
        head.val=x;
        
        if(oldHead==null){
            head.minVal=x;
        }else{
            int oldMin=oldHead.minVal;
            if(x<=oldMin){
                head.minVal=x;
            }else{
                head.minVal=oldMin;
            }
            head.next=oldHead;
        }
    }
    
    public void pop() {
        head=head.next;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.minVal;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
